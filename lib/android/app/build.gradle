import groovy.json.JsonSlurper
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def DEFAULT_COMPILE_SDK_VERSION = 33
def DEFAULT_MIN_SDK_VERSION = 21
def DEFAULT_KOTLIN_VERSION = "1.3.61"
def DEFAULT_KOTLIN_STDLIB_VERSION = "kotlin-stdlib-jdk8"
def DEFAULT_FIREBASE_MESSAGING_VERSION = "21.1.0"

def androidSdkVersion = safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
def androidMinSdkVersion = safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
def androidTargetSdkVersion = safeExtGet('targetSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
def kotlinVersion = safeExtGet('kotlinVersion', DEFAULT_KOTLIN_VERSION)
def kotlinStdlib = safeExtGet('kotlinStdlib', DEFAULT_KOTLIN_STDLIB_VERSION)
def firebaseVersion = safeExtGet('firebaseVersion', DEFAULT_FIREBASE_MESSAGING_VERSION)

android {
    buildToolsVersion = "34.0.0"
    namespace 'com.wix.reactnativenotifications'
    compileSdkVersion androidSdkVersion
    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }
    compileOptions {
        if (reactNativeMinorVersion() >= 73) {
            sourceCompatibility JavaVersion.VERSION_17
            targetCompatibility JavaVersion.VERSION_17
        } else {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }
    kotlinOptions {
        if (reactNativeMinorVersion() >= 73) {
            jvmTarget = JavaVersion.VERSION_17
        } else {
            jvmTarget = JavaVersion.VERSION_11
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            debuggable true
        }
    }


    flavorDimensions "RNNotifications.reactNativeVersion"
    productFlavors {
        reactNative59 {
            dimension "RNNotifications.reactNativeVersion"
        }
        reactNative60 {
            dimension "RNNotifications.reactNativeVersion"
        }
    }

    def flavor = resolveFlavor()
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (!names.contains(flavor)) {
            setIgnore(true)
        }
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.all { t ->
            maxHeapSize = "4g"
            testLogging {
                events "PASSED", "SKIPPED", "FAILED"
                exceptionFormat TestExceptionFormat.FULL
                showExceptions true
                showCauses true
                showStackTraces true
            }
            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "      ${result.resultType} (${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)     "
                    def repeatLength = output.length()
                    println '\n\n' + ('-' * repeatLength) + '\n' + output + '\n' + ('-' * repeatLength) + '\n'

                    println "see report at file://${t.reports.html.outputLocation}/index.html"
                }
            }
        }
    }
}

int reactNativeMinorVersion() {
    List reactNativeVersionComponents = reactNativeVersionComponents(findReactNativePackageJson())
    reactNativeVersionComponents[1].toInteger()
}



String resolveFlavor() {
    def packageSlurper = new JsonSlurper()
    def rnPackageJsonFile = findReactNativePackageJson()
    def reactNativePackageJson = packageSlurper.parseText(rnPackageJsonFile.text)
    def reactNativeVersion = reactNativePackageJson.version

    List versionComponents = reactNativeVersion.tokenize('.')

    if (versionComponents[1].toInteger() < 60) {
        return "reactNative59"
    } else {
        return "reactNative60"
    }
}

List reactNativeVersionComponents(rnPackageJsonFile) {
    def packageSlurper = new JsonSlurper()
    def reactNativePackageJson = packageSlurper.parseText(rnPackageJsonFile.text)
    def reactNativeVersion = reactNativePackageJson.version

    return reactNativeVersion.tokenize('-')[0].tokenize('.')
}

Object findReactNativePackageJson() {
    def searchPath = 'node_modules/react-native/package.json'
    def projectDir = project.projectDir.toString() + '/'
    def rnPackageJsonFile = new File(projectDir + searchPath)
    while (!rnPackageJsonFile.exists()) {
        searchPath = '../' + searchPath
        rnPackageJsonFile = new File(projectDir + searchPath)
    }
    return rnPackageJsonFile
}

dependencies {
    implementation "org.jetbrains.kotlin:$kotlinStdlib:$kotlinVersion"
    implementation "com.google.firebase:firebase-messaging:$firebaseVersion"
    //noinspection GradleDynamicVersion
    implementation 'com.facebook.react:react-native:+'

    // tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.robolectric:robolectric:4.7.2"
    testImplementation "org.assertj:assertj-core:3.8.0"
    testImplementation "com.squareup.assertj:assertj-android:1.1.1"
    testImplementation "org.mockito:mockito-core:4.0.0"
}
